KinesisTriggerTest:
  Comment: 'Tests Workflow from Kinesis Stream'
  StartAt: StartStatus
  States:
    StartStatus:
      Type: Task
      Resource: ${SfSnsReportLambdaFunction.Arn}
      CumulusConfig:
        cumulus_message:
          input: '{$}'
      Catch:
        - &ErrorEqualDefaults
          ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: CnmResponseFail
      Next: TranslateMessage
    TranslateMessage:
      Type: Task
      Resource: ${CNMToCMALambdaFunction.Arn}
      CumulusConfig:
        cumulus_message:
          outputs:
            - source: '{$.cnm}'
              destination: '{$.meta.cnm}'
            - source: '{$}'
              destination: '{$.payload}'
      Catch:
        - <<: *ErrorEqualDefaults
      Next: SyncGranule
    SyncGranule:
      Type: Task
      Resource: ${SyncGranuleLambdaFunction.Arn}
      CumulusConfig:
        provider: '{$.meta.provider}'
        buckets: '{$.meta.buckets}'
        collection: '{$.meta.collection}'
        downloadBucket: '{$.meta.buckets.internal.name}'
        stack: '{$.meta.stack}'
        cumulus_message:
          outputs:
            - source: '{$.granules}'
              destination: '{$.meta.input_granules}'
            - source: '{$}'
              destination: '{$.payload}'
      Retry:
        - ErrorEquals:
            - States.ALL
          IntervalSeconds: 10
          MaxAttempts: 3
      Catch:
        - <<: *ErrorEqualDefaults
      Next: ProcessingStep
    ProcessingStep:
      CumulusConfig:
        bucket: '{$.meta.buckets.internal.name}'
        collection: '{$.meta.collection}'
      Type: Task
      Resource: ${FakeProcessingLambdaFunction.Arn}
      Catch:
        - <<: *ErrorEqualDefaults
      Retry:
        - ErrorEquals:
            - States.ALL
          IntervalSeconds: 2
          MaxAttempts: 3
      Next: MoveGranuleStep
    MoveGranuleStep:
      CumulusConfig:
        bucket: '{$.meta.buckets.internal.name}'
        buckets: '{$.meta.buckets}'
        granuleIdExtraction: '{$.meta.collection.granuleIdExtraction}'
        distribution_endpoint: '{$.meta.distribution_endpoint}'
        input_granules: '{$.meta.input_granules}'
        collection: '{$.meta.collection}'
        duplicateHandling: '{$.meta.collection.duplicateHandling}'
      Type: Task
      Resource: ${MoveGranulesLambdaFunction.Arn}
      Catch:
        - <<: *ErrorEqualDefaults
      Next: CmrStep
    CmrStep:
      CumulusConfig:
        bucket: '{$.meta.buckets.internal.name}'
        stack: '{$.meta.stack}'
        cmr: '{$.meta.cmr}'
        process: '{$.meta.process}'
        input_granules: '{$.meta.input_granules}'
        granuleIdExtraction: '{$.meta.collection.granuleIdExtraction}'
        cumulus_message:
          outputs:
              - source: '{$}'
                destination: '{$.meta.cmrResponse}'
              - source: '{$}'
                destination: '{$.payload}'
      Type: Task
      Resource: ${PostToCmrLambdaFunction.Arn}
      Catch:
        - <<: *ErrorEqualDefaults
      Next: CnmResponse
    CnmResponse: &CnmResponseDefaults
      CumulusConfig:
        OriginalCNM: '{$.meta.cnm}'
        CNMResponseStream: '{$.meta.cnmResponseStream}'
        region: 'us-east-1'
        WorkflowException: '{$.exception}'
        cumulus_message:
          outputs:
            - source: '{$}'
              destination: '{$.meta.cnmResponse}'
            - source: '{$}'
              destination: '{$.payload}'
      Type: Task
      Resource: ${CnmResponseLambdaFunction.Arn}
      Catch:
        - <<: *ErrorEqualDefaults
          Next: StopStatus
      Next: StopStatus
    CnmResponseFail:
      <<: *CnmResponseDefaults
      Catch:
        - <<: *ErrorEqualDefaults
          Next: StopStatusFail
      Next: StopStatusFail
    StopStatus: &StopStatusDefaults
      Type: Task
      Resource: ${SfSnsReportLambdaFunction.Arn}
      CumulusConfig:
        sfnEnd: true
        stack: '{$.meta.stack}'
        bucket: '{$.meta.buckets.internal.name}'
        stateMachine: '{$.cumulus_meta.state_machine}'
        executionName: '{$.cumulus_meta.execution_name}'
        cumulus_message:
          input: '{$.meta.cmrResponse}'
      Catch:
        - ErrorEquals:
          - States.ALL
          Next: WorkflowFailed
      End: true
    StopStatusFail:
      <<: *StopStatusDefaults
      Catch:
        - ErrorEquals:
          - States.ALL
          Next: WorkflowFailed
      Next: WorkflowFailed
    WorkflowFailed:
      Type: Fail
      Cause: 'Workflow failed'